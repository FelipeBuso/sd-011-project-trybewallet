{"version":3,"sources":["pages/Login.js","actions/index.js","components/Header.js","services/serviceAPI.js","components/Method.js","components/Tag.js","components/EnterExpense.js","components/RowTableExpense.jsx","components/TableExpenses.jsx","components/EditExpense.js","pages/Wallet.js","App.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["Login","state","email","password","disableButton","handlerChange","bind","checkPassword","checkEmail","target","name","value","this","setState","length","test","saveEmail","props","className","type","data-testid","onChange","e","placeholder","to","pathname","disabled","onClick","React","Component","connect","dispatch","payload","Header","totalValue","exchangeExpense","createListOfExpenses","sumExpenses","updateTotalValue","prevProps","expenses","expense","rates","exchangeRates","coin","Object","entries","filter","i","code","currency","parseFloat","ask","arrayExpenses","map","push","reduce","acc","curr","userEmail","htmlFor","toFixed","user","wallet","defaultProps","a","fetch","requestAPI","json","data","Method","handleChange","id","Tag","EnterExpense","description","method","tag","getCurrencys","optionsCurrency","createObjectExpense","saveExpenseWallet","getCurrency","then","result","currents","saveApiCurrencyes","keys","current","currencies","key","saveExpense","min","newExpense","catch","error","console","log","fetchExchangesRatesApi","RowTableExpense","exchangeUsed","exchangeValue","extractExchangeObject","exctractExchangeName","extractExchangeValue","updateState","deleteExpense","exchangeObject","exchangeName","item","split","editExpense","PropTypes","shape","updatedExpenses","TableExpenses","EditExpense","getExpenseFromStore","saveEditedExpensesWallet","idEdit","expenseFiltered","saveEditedExpenses","filteredExpenses","editedExpense","sort","b","Wallet","edit","App","exact","path","component","INITIAL_STATE","userReducer","action","walletReducer","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.663dc0a9.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as user from '../actions';\nimport '../styles/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      disableButton: true,\n    };\n    this.handlerChange = this.handlerChange.bind(this);\n    this.checkPassword = this.checkPassword.bind(this);\n    this.checkEmail = this.checkEmail.bind(this);\n  }\n\n  handlerChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n      disableButton: true,\n    }, () => {\n      if (this.checkEmail() && this.checkPassword()) {\n        this.setState({\n          disableButton: false,\n        });\n      }\n    });\n  }\n\n  checkPassword() {\n    const { password } = this.state;\n    const limit = 5;\n    return (password.length > limit);\n  }\n\n  checkEmail() {\n    const { email } = this.state;\n    const eCheck = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    return eCheck.test(email);\n  }\n\n  render() {\n    const { email, password, disableButton } = this.state;\n    const { saveEmail } = this.props;\n    return (\n      <div className=\"login-page\">\n        <div className=\"login-logo\">\n          <h1>Trybewallet</h1>\n        </div>\n        <div className=\"login-fields\">\n          <input\n            name=\"email\"\n            type=\"text\"\n            data-testid=\"email-input\"\n            onChange={ (e) => this.handlerChange(e) }\n            value={ email }\n            placeholder=\"Digite um e-mail valido\"\n          />\n          <input\n            name=\"password\"\n            type=\"text\"\n            data-testid=\"password-input\"\n            onChange={ (e) => this.handlerChange(e) }\n            value={ password }\n            placeholder=\"Digite a senha com no mínimo 6 caracteres\"\n          />\n          <Link to={ { pathname: 'carteira' } }>\n            <button\n              disabled={ disableButton }\n              type=\"button\"\n              onClick={ () => saveEmail(email) }\n            >\n              Entrar\n            </button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => (\n  { saveEmail: (email) => dispatch(user.saveEmailUser(email)) }\n);\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  saveEmail: PropTypes.func.isRequired,\n};\n","export const SAVE_EMAIL_USER = 'SAVE_EMAIL_USER';\nexport const SAVE_EXPENSE_WALLET = 'SAVE_EXPENSE_WALLET';\nexport const SAVE_EXCHANGES_RATES = 'SAVE_EXCHANGES_RATES';\nexport const DELETE_EXPENSE_WALLET = 'DELETE_EXPENSE_WALLET';\nexport const OPEN_EDIT_EXPENSE = 'OPEN_EDIT_EXPENSE';\nexport const SAVE_EDITED_EXPENSES = 'SAVE_EDITED_EXPENSES';\nexport const SAVE_CURRENCYES = 'SAVE_CURRENCYES';\n\nexport const saveEmailUser = (payload) => ({\n  type: SAVE_EMAIL_USER,\n  payload,\n});\n\nexport const saveCurrencyes = (payload) => ({\n  type: SAVE_CURRENCYES,\n  payload,\n});\n\nexport const deleteExpenseWallet = (payload) => ({\n  type: DELETE_EXPENSE_WALLET,\n  payload,\n});\n\nexport const openEditExpense = (payload) => ({\n  type: OPEN_EDIT_EXPENSE,\n  payload,\n});\n\nexport const saveEditedExpense = (payload) => ({\n  type: SAVE_EDITED_EXPENSES,\n  payload,\n});\n\nconst saveExpenseWallet = (payload) => ({\n  type: SAVE_EXPENSE_WALLET,\n  payload,\n});\n\nexport const fetchExchangesRatesApi = (expense) => (dispatch) => {\n  fetch('https://economia.awesomeapi.com.br/json/all')\n    .then((result) => result.json())\n    .then((data) => {\n      const newExpense = expense;\n      newExpense.exchangeRates = data;\n      dispatch(saveExpenseWallet(newExpense));\n    })\n    .catch((error) => console.log(error));\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/Header.css';\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.state = {\n      totalValue: 0,\n    };\n    this.exchangeExpense = this.exchangeExpense.bind(this);\n    this.createListOfExpenses = this.createListOfExpenses.bind(this);\n    this.sumExpenses = this.sumExpenses.bind(this);\n    this.updateTotalValue = this.updateTotalValue.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateTotalValue();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { expenses } = this.props;\n    if (prevProps.expenses !== expenses) {\n      this.updateTotalValue();\n    }\n  }\n\n  exchangeExpense(expense) {\n    const rates = expense.exchangeRates;\n    const coin = Object.entries(rates).filter((i) => i[1].code === expense.currency);\n    const value = parseFloat(expense.value) * parseFloat(coin[0][1].ask);\n    return value;\n  }\n\n  createListOfExpenses() {\n    const { expenses } = this.props;\n    const arrayExpenses = [];\n    expenses.map((expense) => arrayExpenses.push(this.exchangeExpense(expense)));\n    return arrayExpenses;\n  }\n\n  sumExpenses() {\n    const expenses = this.createListOfExpenses();\n    const totalExpenses = expenses.reduce((acc, curr) => acc + curr, 0);\n    return totalExpenses;\n  }\n\n  updateTotalValue() {\n    const value = this.sumExpenses();\n    this.setState({\n      totalValue: value,\n    });\n  }\n\n  render() {\n    const { userEmail } = this.props;\n    const { totalValue } = this.state;\n    return (\n      <section className=\"section-header\">\n        <div className=\"logo\">\n          <h2>Trybewallet</h2>\n        </div>\n        <div className=\"data-user\">\n          <label htmlFor=\"email-field\">\n            Email:\n            <span data-testid=\"email-field\">{ userEmail }</span>\n          </label>\n          <div className=\"expenses-user\">\n            <label htmlFor=\"total-field\">\n              Total de gastos: $\n              <span data-testid=\"total-field\">\n                { parseFloat((totalValue * 100) / 100).toFixed(2) }\n              </span>\n            </label>\n            <span data-testid=\"header-currency-field\">BRL</span>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => (\n  { userEmail: state.user.email, expenses: state.wallet.expenses }\n);\n\nexport default connect(mapStateToProps)(Header);\n\nHeader.propTypes = {\n  userEmail: PropTypes.string,\n  expenses: PropTypes.shape({\n    value: PropTypes.string,\n    currency: PropTypes.string,\n    description: PropTypes.string,\n    id: PropTypes.number,\n    method: PropTypes.string,\n    tag: PropTypes.string,\n    map: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n    exchangeRates: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string])),\n  }),\n};\n\nHeader.defaultProps = {\n  userEmail: 'alguem@algo.com',\n  expenses: {},\n};\n","export default async function getCurrency() {\n  const requestAPI = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await requestAPI.json();\n  return data;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Method extends Component {\n  render() {\n    const { handleChange, value } = this.props;\n    return (\n      <div>\n        <label htmlFor=\"método de pagamento\">\n          Método de pagamento:\n          <select\n            id=\"método de pagamento\"\n            name=\"method\"\n            data-testid=\"method-input\"\n            onChange={ (e) => handleChange(e) }\n            value={ value }\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n}\n\nMethod.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Tag extends Component {\n  render() {\n    const { handleChange, value } = this.props;\n    return (\n      <div>\n        <label htmlFor=\"tag\">\n          Tag:\n          <select\n            id=\"tag\"\n            name=\"tag\"\n            data-testid=\"tag-input\"\n            onChange={ (e) => handleChange(e) }\n            value={ value }\n          >\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n}\n\nTag.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport getCurrency from '../services/serviceAPI';\nimport Method from './Method';\nimport Tag from './Tag';\nimport { saveCurrencyes, fetchExchangesRatesApi } from '../actions';\nimport '../styles/EnterExpense.css';\n\nclass EnterExpense extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n    this.getCurrencys = this.getCurrencys.bind(this);\n    this.optionsCurrency = this.optionsCurrency.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.createObjectExpense = this.createObjectExpense.bind(this);\n    this.saveExpenseWallet = this.saveExpenseWallet.bind(this);\n  }\n\n  componentDidMount() {\n    getCurrency().then((result) => this.getCurrencys(result));\n  }\n\n  getCurrencys(currents) {\n    const { saveApiCurrencyes } = this.props;\n    const listCurrents = Object.keys(currents).filter((current) => current !== 'USDT');\n    saveApiCurrencyes(listCurrents);\n  }\n\n  optionsCurrency() {\n    const { wallet: { currencies } } = this.props;\n    return currencies.map((currency, i) => (\n      <option\n        key={ i }\n        value={ currency }\n      >\n        { currency }\n      </option>\n    ));\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  createObjectExpense() {\n    const { wallet } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    const id = wallet.expenses.length;\n    const objectExpense = {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates: {},\n    };\n    return objectExpense;\n  }\n\n  saveExpenseWallet() {\n    const { saveExpense } = this.props;\n    const actualExpense = this.createObjectExpense();\n    saveExpense(actualExpense);\n    this.setState({\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n    });\n  }\n\n  render() {\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <form className=\"form-input-expense\">\n        <label htmlFor=\"valor\">\n          Valor:\n          <input\n            type=\"number\"\n            id=\"valor\"\n            name=\"value\"\n            min=\"0\"\n            onChange={ (e) => this.handleChange(e) }\n            value={ value }\n          />\n        </label>\n        <label htmlFor=\"descrição\">\n          Descrição:\n          <input\n            id=\"descrição\"\n            type=\"text\"\n            name=\"description\"\n            onChange={ (e) => this.handleChange(e) }\n            value={ description }\n          />\n        </label>\n        <label htmlFor=\"moeda\">\n          Moeda:\n          <select\n            id=\"moeda\"\n            name=\"currency\"\n            onChange={ (e) => this.handleChange(e) }\n            value={ currency }\n          >\n            { this.optionsCurrency() }\n          </select>\n        </label>\n        <Method value={ method } handleChange={ this.handleChange } />\n        <Tag value={ tag } handleChange={ this.handleChange } />\n        <button\n          type=\"button\"\n          onClick={ () => this.saveExpenseWallet() }\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({ wallet: state.wallet });\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveExpense: (expense) => dispatch(fetchExchangesRatesApi(expense)),\n  saveApiCurrencyes: (currencies) => dispatch(saveCurrencyes(currencies)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EnterExpense);\n\nEnterExpense.propTypes = {\n  saveExpense: PropTypes.func.isRequired,\n  saveApiCurrencyes: PropTypes.func.isRequired,\n  wallet: PropTypes.arrayOf(\n    PropTypes.string,\n    PropTypes.number,\n  ),\n};\n\nEnterExpense.defaultProps = {\n  wallet: [],\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteExpenseWallet, openEditExpense } from '../actions';\n// import { openEditExpense } from '../actions';\n\nclass RowTableExpense extends Component {\n  constructor() {\n    super();\n    this.state = {\n      exchangeUsed: '',\n      exchangeValue: 0,\n    };\n    this.extractExchangeObject = this.extractExchangeObject.bind(this);\n    this.exctractExchangeName = this.exctractExchangeName.bind(this);\n    this.extractExchangeValue = this.extractExchangeValue.bind(this);\n    this.updateState = this.updateState.bind(this);\n    this.deleteExpense = this.deleteExpense.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateState();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { expense } = this.props;\n    if (prevProps.expense !== expense) {\n      this.updateState();\n    }\n  }\n\n  updateState() {\n    const exchangeObject = this.extractExchangeObject();\n    const exchangeName = this.exctractExchangeName(exchangeObject);\n    const exchangeValue = this.extractExchangeValue(exchangeObject);\n    console.log(exchangeObject);\n    this.setState({\n      exchangeUsed: exchangeName[0],\n      exchangeValue,\n    });\n  }\n\n  extractExchangeObject() {\n    const { expense: { exchangeRates, currency } } = this.props;\n    const exchangeObject = Object.entries(exchangeRates).filter(\n      (item) => item[1].code === currency,\n    );\n    console.log(exchangeObject);\n    return exchangeObject;\n  }\n\n  exctractExchangeName(exchangeObject) {\n    const exchangeName = exchangeObject[0][1].name;\n    const exchangeUsed = exchangeName.split('/');\n    console.log(exchangeUsed[0]);\n    return exchangeUsed;\n  }\n\n  extractExchangeValue(exchangeObject) {\n    const exchangeValue = exchangeObject[0][1].ask;\n    return parseFloat(exchangeValue);\n  }\n\n  deleteExpense(id) {\n    const { expenses, deleteExpense } = this.props;\n    const deletedExpenseNewArray = expenses.filter((expense) => expense.id !== id);\n    deleteExpense(deletedExpenseNewArray);\n    // console.log(deletedExpenseNewArray);\n  }\n\n  render() {\n    const { expense: { description, tag, method, value, id }, editExpense } = this.props;\n    const { exchangeUsed, exchangeValue } = this.state;\n    return (\n      <tr className=\"table-row\">\n        <td name={ description } id={ description }>{ description }</td>\n        <td name={ tag } id={ tag }>{ tag }</td>\n        <td name={ method } id={ method }>{ method }</td>\n        <td\n          id={ value }\n          name={ value }\n        >\n          { value }\n        </td>\n        <td name={ exchangeUsed } id={ exchangeUsed }>{ exchangeUsed }</td>\n        <td\n          name={ parseFloat((exchangeValue * 100) / 100).toFixed(2) }\n          id={ parseFloat((exchangeValue * 100) / 100).toFixed(2) }\n        >\n          { parseFloat((exchangeValue * 100) / 100).toFixed(2) }\n        </td>\n        <td\n          name={ parseFloat((value * exchangeValue * 100) / 100).toFixed(2) }\n          id={ parseFloat((value * exchangeValue * 100) / 100).toFixed(2) }\n        >\n          { parseFloat((value * exchangeValue * 100) / 100).toFixed(2) }\n        </td>\n        <td name=\"Real\" id=\"Real\">Real</td>\n        <td>\n          <button\n            type=\"button\"\n            data-testid=\"delete-btn\"\n            onClick={ () => this.deleteExpense(id) }\n          >\n            Excluir\n          </button>\n          <button\n            type=\"button\"\n            data-testid=\"edit-btn\"\n            onClick={ () => editExpense(id) }\n          >\n            Alterar despesa\n          </button>\n        </td>\n      </tr>\n    );\n  }\n}\n\nRowTableExpense.propTypes = {\n  editExpense: PropTypes.func.isRequired,\n  expense: PropTypes.shape({\n    id: PropTypes.number,\n    description: PropTypes.string,\n    tag: PropTypes.string,\n    method: PropTypes.string,\n    value: PropTypes.number,\n    currency: PropTypes.string,\n    exchangeRates: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string])),\n  }),\n  expenses: PropTypes.shape({\n    description: PropTypes.string,\n    tag: PropTypes.string,\n    method: PropTypes.string,\n    value: PropTypes.number,\n    currency: PropTypes.string,\n    exchangeRates: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string])),\n    filter: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  }),\n  deleteExpense: PropTypes.func.isRequired,\n};\n\nRowTableExpense.defaultProps = {\n  expense: PropTypes.shape({\n    id: '',\n    description: '',\n    tag: '',\n    method: '',\n    value: '',\n    currency: '',\n    exchangeRates: {},\n  }),\n  expenses: PropTypes.shape({\n    description: '',\n    tag: '',\n    method: '',\n    value: '',\n    currency: '',\n    exchangeRates: {},\n  }),\n};\n\nconst mapStateToProps = (state) => ({ expenses: state.wallet.expenses });\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (updatedExpenses) => dispatch(deleteExpenseWallet(updatedExpenses)),\n  editExpense: (id) => dispatch(openEditExpense(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RowTableExpense);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport RowTableExpense from './RowTableExpense';\nimport '../styles/TableExpenses.css';\n\nclass TableExpenses extends Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div>\n        <table className=\"table-section\">\n          <thead>\n            <tr className=\"table-header\">\n              <th id=\"Descrição\">Descrição</th>\n              <th id=\"Tag\">Tag</th>\n              <th id=\"Método de pagamento\">Método de pagamento</th>\n              <th id=\"Valor\">Valor</th>\n              <th id=\"Moeda\">Moeda</th>\n              <th id=\"Câmbio utilizado\">Câmbio utilizado</th>\n              <th id=\"Valor convertido\">Valor convertido</th>\n              <th id=\"Moeda de conversão\">Moeda de conversão</th>\n              <th id=\"Editar/Excluir\">Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            { expenses.map((expense) => (\n              <RowTableExpense\n                key={ expense.id }\n                expense={ expense }\n              />))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({ expenses: state.wallet.expenses });\n\nexport default connect(mapStateToProps)(TableExpenses);\n\nTableExpenses.propTypes = {\n  expenses: PropTypes.shape({\n    description: PropTypes.string,\n    tag: PropTypes.string,\n    method: PropTypes.string,\n    value: PropTypes.number,\n    currency: PropTypes.string,\n    exchangeRates: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string])),\n    map: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  }),\n};\n\nTableExpenses.defaultProps = {\n  expenses: PropTypes.shape({\n    description: '',\n    tag: '',\n    method: '',\n    value: '',\n    currency: '',\n    exchangeRates: {},\n  }),\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Method from './Method';\nimport Tag from './Tag';\nimport { saveEditedExpense } from '../actions';\nimport '../styles/EditExpense.css';\n\nclass EditExpense extends Component {\n  constructor() {\n    super();\n    this.state = {\n      id: '',\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n      exchangeRates: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.getExpenseFromStore = this.getExpenseFromStore.bind(this);\n    this.optionsCurrency = this.optionsCurrency.bind(this);\n    this.saveEditedExpensesWallet = this.saveEditedExpensesWallet.bind(this);\n  }\n\n  componentDidMount() {\n    this.getExpenseFromStore();\n  }\n\n  getExpenseFromStore() {\n    const { wallet: { idEdit, expenses } } = this.props;\n    const expenseFiltered = expenses.filter((expense) => expense.id === idEdit);\n    console.log(expenseFiltered[0].id);\n    this.setState({\n      id: expenseFiltered[0].id,\n      value: expenseFiltered[0].value,\n      description: expenseFiltered[0].description,\n      currency: expenseFiltered[0].currency,\n      method: expenseFiltered[0].method,\n      tag: expenseFiltered[0].tag,\n      exchangeRates: expenseFiltered[0].exchangeRates,\n    });\n  }\n\n  createObjectExpense() {\n    const { id, value, description, currency, method, tag, exchangeRates } = this.state;\n    const objectExpense = {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates,\n    };\n    return objectExpense;\n  }\n\n  optionsCurrency() {\n    const { wallet: { currencies } } = this.props;\n    return currencies.map((currency, i) => (\n      <option\n        key={ i }\n        value={ currency }\n      >\n        { currency }\n      </option>\n    ));\n  }\n\n  saveEditedExpensesWallet() {\n    const { id } = this.state;\n    const { wallet: { expenses }, saveEditedExpenses } = this.props;\n    const filteredExpenses = expenses.filter((expense) => expense.id !== id);\n    const editedExpense = this.createObjectExpense();\n    const editedExpensesWallet = [...filteredExpenses, editedExpense];\n    const sortEditedExpensesWallet = editedExpensesWallet.sort((a, b) => a.id - b.id);\n    saveEditedExpenses(sortEditedExpensesWallet);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <form className=\"form-edit-expense\">\n        <label htmlFor=\"valor\">\n          Valor:\n          <input\n            type=\"number\"\n            id=\"valor\"\n            name=\"value\"\n            min=\"0\"\n            data-testid=\"value-input\"\n            onChange={ (e) => this.handleChange(e) }\n            value={ value }\n          />\n        </label>\n        <label htmlFor=\"descrição\">\n          Descrição:\n          <input\n            id=\"descrição\"\n            type=\"text\"\n            name=\"description\"\n            data-testid=\"description-input\"\n            onChange={ (e) => this.handleChange(e) }\n            value={ description }\n          />\n        </label>\n        <label htmlFor=\"currency\">\n          Moeda:\n          <select\n            id=\"currency\"\n            name=\"currency\"\n            data-testid=\"currency-input\"\n            onChange={ (e) => this.handleChange(e) }\n            value={ currency }\n          >\n            { this.optionsCurrency() }\n          </select>\n        </label>\n        <Method value={ method } handleChange={ this.handleChange } />\n        <Tag value={ tag } handleChange={ this.handleChange } />\n        <button\n          type=\"button\"\n          onClick={ () => this.saveEditedExpensesWallet() }\n        >\n          Editar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({ wallet: state.wallet });\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveEditedExpenses: (expense) => dispatch(saveEditedExpense(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditExpense);\n\nEditExpense.propTypes = {\n  saveEditedExpenses: PropTypes.func.isRequired,\n  wallet: PropTypes.arrayOf(\n    PropTypes.string,\n    PropTypes.number,\n  ),\n};\n\nEditExpense.defaultProps = {\n  wallet: [],\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport EnterExpense from '../components/EnterExpense';\nimport TableExpenses from '../components/TableExpenses';\nimport EditExpense from '../components/EditExpense';\nimport '../styles/EditExpense.css';\n\nclass Wallet extends React.Component {\n  render() {\n    const { edit } = this.props;\n    return (\n      <div className=\"page-wallet\">\n        <Header />\n        { edit ? <EditExpense /> : <EnterExpense />}\n        <TableExpenses />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({ edit: state.wallet.edit });\n\nexport default connect(mapStateToProps)(Wallet);\n\nWallet.propTypes = {\n  edit: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { SAVE_EMAIL_USER } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction userReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SAVE_EMAIL_USER:\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default userReducer;\n","import {\n  SAVE_EXPENSE_WALLET,\n  DELETE_EXPENSE_WALLET,\n  OPEN_EDIT_EXPENSE,\n  SAVE_EDITED_EXPENSES,\n  SAVE_CURRENCYES,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  edit: false,\n  idEdit: '',\n};\n\nfunction walletReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SAVE_CURRENCYES:\n    return {\n      ...state,\n      currencies: [...action.payload],\n    };\n  case SAVE_EXPENSE_WALLET:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.payload],\n    };\n  case DELETE_EXPENSE_WALLET:\n    return {\n      ...state,\n      expenses: [...action.payload],\n    };\n  case OPEN_EDIT_EXPENSE:\n    return {\n      ...state,\n      edit: true,\n      idEdit: action.payload,\n    };\n  case SAVE_EDITED_EXPENSES:\n    return {\n      ...state,\n      expenses: [...action.payload],\n      edit: false,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}